using System.Diagnostics;
using Shintio.CodeGenerator.Enums;
using Shintio.CodeGenerator.Interfaces;
using Shintio.CodeGenerator.Models;
using Shintio.CodeGenerator.Utils;
using Shintio.CodeProcessor.Utils;
using Shintio.Essentials.Extensions;

namespace Shintio.CodeGenerator.Common;

public abstract class Generator : IGenerator
{
	private static object _lock = new();

	private readonly string _name;
	private readonly ConsoleColor _color;

	public Generator()
	{
		_name = GetType().Name;

		var colors = Enum.GetValues<ConsoleColor>()
			.Exclude(ConsoleColor.White, ConsoleColor.Gray, ConsoleColor.Black)
			.ToArray();
		_color = colors[Math.Abs(_name.Sum(c => c)) % (colors.Length - 1)];
	}

	protected virtual bool NeedToFormat => true;

	public async Task Load()
	{
		var stopwatch = Stopwatch.StartNew();

		await Preload();

		stopwatch.Stop();
		Log($"preloaded in {stopwatch.ElapsedMilliseconds}ms");
	}

	public async Task<IEnumerable<FileResult>> Run()
	{
		var files = new List<FileResult>();

		var stopwatch = Stopwatch.StartNew();
		foreach (var template in GetTemplates())
		{
			var templateStopwatch = Stopwatch.StartNew();
			files.AddRange((await template.Run()).Select(p => new FileResult(
				p.Key,
				template.ProjectInfo,
				template.CodeLanguage,
				p.Value
			)));
			templateStopwatch.Stop();
			Log($"{template.GetType().Name} runned in {templateStopwatch.ElapsedMilliseconds}ms");
		}

		stopwatch.Stop();
		Log($"generated in {stopwatch.ElapsedMilliseconds}ms");
		stopwatch.Restart();

		var sharp = new Dictionary<ProjectInfo, List<FileResult>>();
		foreach (var file in files.ToArray())
		{
			if (file.CodeLanguage != CodeLanguage.CSharp)
			{
				continue;
			}

			sharp.TryAdd(file.Project, new List<FileResult>());
			sharp[file.Project].Add(file);
			files.Remove(file);
		}

		if (sharp.Count > 0)
		{
			foreach (var (project, contents) in sharp)
			{
				var result = "";
				
				if (NeedToFormat)
				{
					result = SharpCombiner.CombineCode(contents.OrderBy(f => f.Name).Select(f => f.Content));

					result = string.Join(
						"\n",
						result.Split('\n')
							.Where(l => !(
								string.IsNullOrWhiteSpace(l) ||
								l.Trim().StartsWith("//") ||
								l.Trim().StartsWith("#nullable enable") ||
								l.Trim().StartsWith("#pragma warning disable CS8601") ||
								l.Trim().StartsWith("#pragma warning disable CS8618")
							))
					);
				}
				else
				{
					result = string.Join("\n", contents.OrderBy(f => f.Name).Select(f => f.Content));
				}

				files.Add(new FileResult(
					$"{GetType().Name}.Generated.cs",
					project,
					CodeLanguage.CSharp,
					$"{DocumentationHelper.AutoGeneratedComment}\n{result}"
				));
			}
		}

		stopwatch.Stop();
		Log($"formatted in {stopwatch.ElapsedMilliseconds}ms");

		return files;
	}

	protected abstract Task Preload();
	protected abstract IEnumerable<ITemplate> GetTemplates();

	private void Log(string message)
	{
		lock (_lock)
		{
			var oldColor = Console.ForegroundColor;
			Console.Write("[");
			Console.ForegroundColor = _color;
			Console.Write(_name);
			Console.ForegroundColor = oldColor;
			Console.WriteLine($"] {message}");
		}
	}
}