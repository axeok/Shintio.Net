using System.Text.RegularExpressions;

namespace Shintio.CodeGenerator.Utils
{
    public class DocumentationHelper
    {
        public const string AutoGeneratedComment =
            """
            //------------------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by a tool.
            //
            //     Changes to this file may cause incorrect behavior and will be lost if
            //     the code is regenerated.
            // </auto-generated>
            //------------------------------------------------------------------------------

            #nullable enable
            #pragma warning disable CS8601 // Possible null reference assignment.
            #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
            """;

        public const string UrlRegex =
            @"((http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?)";

        private static readonly Regex UrlRegexWithAlias1 = new Regex($@"\[(.+)\]\(({UrlRegex})\)",
            RegexOptions.Compiled | RegexOptions.IgnoreCase);

        private static readonly Regex UrlRegexWithAlias2 = new Regex($@"(.+): ({UrlRegex})",
            RegexOptions.Compiled | RegexOptions.IgnoreCase);

        private static readonly Regex UrlRegexWithoutAlias1 =
            new Regex($@"(<{UrlRegex}>)", RegexOptions.Compiled | RegexOptions.IgnoreCase);

        public static string FormatSummary(string text)
        {
            text = FormatLinks(text);
            text = FormatLines(text);

            return $"/// <summary>{text}</summary>{Environment.NewLine}";
        }

        private static string FormatLines(string text)
        {
            var lines = "";

            var lineIndex = 0;
            foreach (var line in text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries))
            {
                var formattedLine = $"<![CDATA[{line}]]>";

                if (lineIndex % 2 == 1)
                {
                    formattedLine = $"<para>{formattedLine}</para>";
                }

                formattedLine = $"{formattedLine}";

                lines += formattedLine;
                lineIndex++;
            }

            return lines;
        }

        private static string FormatLinks(string text)
        {
            foreach (Match match in UrlRegexWithAlias1.Matches(text))
            {
                var alias = match.Groups[1].Value;
                var link = match.Groups[2].Value;
                text = text.Replace(match.Value, $"<a href=\"{link}\">{alias}</a>");
            }

            foreach (Match match in UrlRegexWithAlias2.Matches(text))
            {
                var alias = match.Groups[1].Value;
                var link = match.Groups[2].Value;
                text = text.Replace(match.Value, $"<a href=\"{link}\">{alias}</a>");
            }

            foreach (Match match in UrlRegexWithoutAlias1.Matches(text))
            {
                var link = match.Groups[1].Value;
                text = text.Replace(match.Value, $"{link[1..^1]}");
            }

            return text;
        }
    }
}