using System.Diagnostics;
using Shintio.CodeGenerator.Enums;
using Shintio.CodeGenerator.Interfaces;
using Shintio.CodeGenerator.Models;
using Shintio.CodeGenerator.Utils;
using Shintio.CodeProcessor.Utils;

namespace Shintio.CodeGenerator.Common;

public abstract class Generator : IGenerator
{
    public async Task Load()
    {
        var stopwatch = Stopwatch.StartNew();

        await Preload();

        stopwatch.Stop();
        Console.WriteLine($"{GetType().Name} preloaded in {stopwatch.ElapsedMilliseconds}ms");
    }

    public async Task<IEnumerable<FileResult>> Run()
    {
        var files = new List<FileResult>();

        var stopwatch = Stopwatch.StartNew();
        foreach (var template in GetTemplates())
        {
            files.AddRange((await template.Run()).Select(p => new FileResult(
                p.Key,
                template.ProjectInfo,
                template.CodeLanguage,
                p.Value
            )));
        }

        var sharp = new Dictionary<ProjectInfo, List<FileResult>>();
        foreach (var file in files.ToArray())
        {
            if (file.CodeLanguage != CodeLanguage.CSharp)
            {
                continue;
            }

            sharp.TryAdd(file.Project, new List<FileResult>());
            sharp[file.Project].Add(file);
            files.Remove(file);
        }

        if (sharp.Count > 0)
        {
            foreach (var (project, contents) in sharp)
            {
                var combined = SharpCombiner.CombineCode(contents.OrderBy(f => f.Name).Select(f => f.Content));

                combined = string.Join(
                    "\n",
                    combined.Split('\n')
                        .Where(l => !(
                            string.IsNullOrWhiteSpace(l) ||
                            l.Trim().StartsWith("//") ||
                            l.Trim().StartsWith("#nullable enable") ||
                            l.Trim().StartsWith("#pragma warning disable CS8601") ||
                            l.Trim().StartsWith("#pragma warning disable CS8618")
                        ))
                );

                files.Add(new FileResult(
                    $"{GetType().Name}.Generated.cs",
                    project,
                    CodeLanguage.CSharp,
                    $"{DocumentationHelper.AutoGeneratedComment}\n{combined}"
                ));
            }
        }

        stopwatch.Stop();
        Console.WriteLine($"{GetType().Name} generated in {stopwatch.ElapsedMilliseconds}ms");

        return files;
    }

    protected abstract Task Preload();
    protected abstract IEnumerable<ITemplate> GetTemplates();
}